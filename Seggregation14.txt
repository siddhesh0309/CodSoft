import pandas as pd
from openpyxl import load_workbook

# File paths
template_file = "template.xlsm"
mapping_file = "mapping_file.xlsx"

# Load data from template
print("üîÑ Reading template...")
template_df = pd.read_excel(template_file, sheet_name="Account Holder", engine="openpyxl", header=None, skiprows=8)
headers = pd.read_excel(template_file, sheet_name="Account Holder", engine="openpyxl", nrows=1, skiprows=3).columns.tolist()
template_df.columns = headers

# Load mapping file (Occupation, GHO Code, Status of Account)
print("üîÑ Loading mapping file...")
mapping_df = pd.read_excel(mapping_file, engine="openpyxl")[["Account Number", "Occupation", "GHO Code", "Status of Account"]]

# Merge selected columns into the template
print("üîó Merging fields into template...")
merged_df = template_df.merge(mapping_df, on="Account Number", how="left")

# Write updated fields back to template
print("‚úçÔ∏è Writing merged fields back to template...")
workbook = load_workbook(template_file, keep_vba=True)
sheet = workbook["Account Holder"]

# Set column headers at row 4 for new fields
start_col_index = len(headers) + 1
new_fields = ["Occupation", "GHO Code", "Status of Account"]
for i, col_name in enumerate(new_fields):
    sheet.cell(row=4, column=start_col_index + i, value=col_name)

# Write values starting from row 9
for row_idx, row in enumerate(merged_df.itertuples(index=False), start=9):
    for i, col_name in enumerate(new_fields):
        sheet.cell(row=row_idx, column=start_col_index + i, value=getattr(row, col_name.replace(" ", "_")))

# Save the updated file
workbook.save(template_file)
print("‚úÖ Fields added and template saved.")




# Standardize text for comparison
mapping_df["Occupation"] = mapping_df["Occupation"].astype(str).str.strip().str.upper()
mapping_df["GHO Code"] = mapping_df["GHO Code"].astype(str).str.strip().str.upper()

# Apply logic:
# 1. If Occupation is HOUSEWIFE or STUDENT ‚Üí DEPENDENT
# 2. If GHO Code is MRS or PBM ‚Üí DEPENDENT (overrides)
print("‚öôÔ∏è Applying occupation rules...")
mapping_df.loc[mapping_df["Occupation"].isin(["HOUSEWIFE", "STUDENT"]), "Occupation"] = "DEPENDENT"
mapping_df.loc[mapping_df["GHO Code"].isin(["MRS", "PBM"]), "Occupation"] = "DEPENDENT"







def handle_seafarer(row):
    if str(row['Occupation']).strip().upper() != "SEAFARER":
        return row['Occupation']

    for i in range(9):
        tin_col = f'TIN_Issuing_Country{"" if i == 0 else i}'
        ftin_col = f'Foreign_TIN{"" if i == 0 else i}'

        tin_country = str(row.get(tin_col, '')).strip().upper()
        tin_value = str(row.get(ftin_col, '')).strip().upper()

        # If TIN Issuing Country is NOT IN and TIN is valid (not blank or AAAAAAAAA)
        if tin_country and tin_country != 'IN' and tin_value and tin_value != 'AAAAAAAAA':
            return ''  # Clear occupation if valid foreign TIN exists

    return 'SEAFARER'  # Keep if all foreign TINs are blank or AAAAAAAAA

# Apply SeaFarer logic
print("‚öì Applying SeaFarer occupation logic...")
mapping_df["Occupation"] = mapping_df.apply(handle_seafarer, axis=1)














# Standardize text for comparison
mapping_df["Occupation"] = mapping_df["Occupation"].astype(str).str.strip().str.upper()
mapping_df["GHO Code"] = mapping_df["GHO Code"].astype(str).str.strip().str.upper()
mapping_df["Status of Account"] = mapping_df["Status of Account"].astype(str).str.strip()

# Apply occupation logic:
print("‚öôÔ∏è Applying occupation rules...")

# 1. HOUSEWIFE or STUDENT ‚Üí DEPENDENT
mapping_df.loc[mapping_df["Occupation"].isin(["HOUSEWIFE", "STUDENT"]), "Occupation"] = "DEPENDENT"

# 2. GHO Code is MRS or PBM ‚Üí DEPENDENT (overrides)
mapping_df.loc[mapping_df["GHO Code"].isin(["MRS", "PBM"]), "Occupation"] = "DEPENDENT"

# 3. Status of Account is 2 or 3 ‚Üí INACTIVE
mapping_df.loc[mapping_df["Status of Account"].isin(["2", "3"]), "Occupation"] = "INACTIVE"









# Clean all TIN-related columns before logic
print("üßπ Cleaning TIN and Country fields...")

for i in range(9):
    ftin_col = f'Foreign_TIN{"" if i == 0 else i}'
    tin_col = f'TIN_Issuing_Country{"" if i == 0 else i}'

    for col in [ftin_col, tin_col]:
        if col in merged_df.columns:
            merged_df[col] = (
                merged_df[col]
                .astype(str)
                .str.strip()
                .str.upper()
                .replace({'NAN': '', 'NONE': '', 'NaN': '', 'nan': ''})
                .fillna('')
            )






